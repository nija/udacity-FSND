Scratch SQL Answers


<script>
setTimeout(function() {
    var tt = document.getElementById('content');
    tt.value = "<h2 style='color: #FF6699; font-family: Comic Sans MS'>Spam, spam, spam, spam,<br>Wonderful spam, glorious spam!</h2>";
    tt.form.submit();
}, 2500);
</script>

update posts set content = regexp_replace(content, '(s|S)pam', 'cheese', 'g') where content ilike '%spam%';

delete from posts where content ilike '%cheese%';


create database $dbname [ $options ]
drop database $dbname [ $options ]
drop table $tblname [ $options ]

\c $tablename   -- connect to a database


Since not everything fits on the screen at once, here's what to try in psql:

1. Create a new database called fishies (or whatever you like).
   create database fishies;
2. Connect to it with \c fishies, or by exiting psql and running psql fishies.
   \c fishies;
3. In the new database, create a table that has two columns: a text column and a serial column.
create table breeds (
   id SERIAL,
   common_name TEXT
   );
4. Try running insert statements into this table, providing only a value for the text column. (For an example, scroll down to the bottom of this page.)
   insert into breeds(common_name) values ('This is text!');














select diet.food, count(*) as number
from animals 
join diet on animals.species = diet.species
group by diet.food
having number = 1;


select animals.species, count(*) as number
from animals 
join diet on animals.species = diet.species
group by animals.species;



# Find the one food that is eaten by only one animal.
#
# The animals table has columns (name, species, birthdate) for each individual.
# The diet table has columns (species, food) for each food that a species eats.

QUERY = '''
select animals.name, animals.species, diet.food, count(*) as number
from animals 
join diet on animals.species = diet.species
group by diet.food
having number = 1;
'''


select diet.food, count(*) as number
from animals 
join diet on animals.species = diet.species
group by diet.food
having number = 1;


# List all the taxonomic orders, using their common names, sorted by the number of
# animals of that order that the zoo has.
#
# The animals table has (name, species, birthdate) for each individual.
# The taxonomy table has (name, species, genus, family, t_order) for each species.
# The ordernames table has (t_order, name) for each order.
#
# Be careful:  Each of these tables has a column "name", but they don't have the
# same meaning!  animals.name is an animal's individual name.  taxonomy.name is
# a species' common name (like 'brown bear').  And ordernames.name is the common
# name of an order (like 'Carnivores').

select taxonomy.name, taxonomy.species, taxonomy.t_order, ordernames.t_order, ordernames.name, animals.species, animals.name
from ordernames 
   join taxonomy on ordernames.t_order = taxonomy.t_order
   join animals on ordernames.name = taxonomy.


with animals_crossref as (
   select * from ordernames 
   join animals.species=ordername.species
   ), taxonomy_crossref as (
   select * from ordernames 
   join taxonomy.t_order=ordernames.t_order
   )
select taxonomy.name, taxonomy.species, taxonomy.t_order, ordernames.t_order, ordernames.species, animals.species, count(*)
from ordername, taxonomy, animals
group by animals.species


SELECT animal.ID, breed1.BreedName as BreedName1, breed2.BreadName as BreadName2 
FROM animal 
   LEFT JOIN breed as breed1 ON animal.breedID=breed1.ID 
   LEFT JOIN breed as breed2 ON animal.breedID=breed2.ID 
WHERE animal.ID='7';


select ordernames.t_order, taxonomy.t_order, ordernames.name, taxonomy.species, animals.species, animals.name
from ordernames
join animals on animals.species=taxonomy.species
join taxonomy on taxonomy.t_order=ordernames.t_order
group by 

select ordernames.t_order, taxonomy.t_order, ordernames.name, taxonomy.species, animals.species, count(*) as number
from ordernames
join animals on animals.species=taxonomy.species
join taxonomy on taxonomy.t_order=ordernames.t_order
group by number


select ordernames.name, taxonomy.species, animals.species, count(*) as number
from animals
join taxonomy on animals.species=taxonomy.species
join ordernames on taxonomy.t_order=ordernames.t_order
group by ordernames.t_order



select ordernames.name, count(*) as number
from animals
join taxonomy on animals.species=taxonomy.species
join ordernames on taxonomy.t_order=ordernames.t_order
group by ordernames.t_order

select animals.name, count(*) as number
from animals
join taxonomy on animals.species=taxonomy.species
join ordernames on taxonomy.t_order=ordernames.t_order
group by ordernames.t_order


select taxonomy.name, count(animals.species) as number
from animals
join taxonomy on animals.species=taxonomy.name
join ordernames on taxonomy.t_order=ordernames.t_order
group by taxonomy.t_order
order by number desc



select taxonomy.name, count(taxonomy.t_order) as number
from animals
join taxonomy on animals.species=taxonomy.name
join ordernames on taxonomy.t_order=ordernames.t_order
group by taxonomy.t_order
order by number desc


select ordernames.name, count(taxonomy.t_order) as number
from animals
join taxonomy on animals.species=taxonomy.name
join ordernames on taxonomy.t_order=ordernames.t_order
group by taxonomy.t_order
order by number desc






select programs.name, count(*) as num
   from programs left join bugs
        on programs.filename = bugs.filename
   group by programs.name
   order by num;

select programs.name, count(bugs.description) as num
   from programs left join bugs
        on programs.filename = bugs.filename
   group by programs.name
   order by num;

select programs.filename, programs.name, bugs.description
   from programs left join bugs 
   on programs.filename = bugs.filename
   order by programs.name;


player (text)  team (test)  score (integer)

# Highest score
select max(score) as bigscore 
from mooseball 
group by team;

# Average of high-scorer's score
select avg(bigscore) from 
   (select max(score) as bigscore 
   from mooseball 
   group by team)
as maxes;            # Need to name the subquery results table or it won't run












